rftc() {
    ssh $1 "cat $2" | xclip -selection c
}

# some basic cd functions
cdup() {
    limit=$1
    counter=1
    while [ $counter -le $limit ]
    do
        cd ../
        ((counter++))
    done
}

# cdf cd into a directory and if it has only 1 child follow its children until
# there is more than one or none do the same for cdf ..
# TODO PUT AN IF ZSH AROUND THIS
cdf() {
    if [[ -d "$1" ]]; then
        cd $1
        zmodload zsh/parameter
        if [[ "cdf .." != $history[$HISTCMD] ]]; then
            # exits if there is a file and a directory done seperately so file is not skipped
              while [[ $(ls -DA | wc -l) = "1" && $(ls -A | wc -l) = "1" ]]; do
                f=$(\ls -DA) # graaahhhh coloring appends text to the file variable
                if [[ -d "$f" ]]; then
                    cd "$f"
                else
                    break
                fi
            done
        elif [[ "cdf .." == $history[$HISTCMD] ]]; then
            # exits if there is a file and a directory done seperately so file is not skipped
              while [[ $(ls -DA | wc -l) = "1" && $(ls -A | wc -l) = "1" ]]; do
                cd ..
            done
        fi
    fi
}

cded() {
    cd $(dirname $(where $1))
}

largest() {
    DIR=${1:-./}
    NUMRES=${2:-20}
    if [ -z "$3" ]; then
        du -h -a $DIR | sort -h -r| head -n $NUMRES
    else
        du -h -a $DIR | sort -h | head -n $NUMRES
    fi
}

largest-dirs() {
    DIR=${1:-./}
    NUMRES=${2:-20}
    if [ -z "$3" ]; then
        du -h -a $DIR | sort -h -r | head -n $NUMRES
    else
        du -h -a $DIR | sort -h | head -n $NUMRES
    fi
}

largest-files() {
    DIR=${1:-./}
    NUMRES=${2:-20}
    if [ -z "$3" ]; then
        find $DIR -type f -exec du -a -h {}\; | sort -h -r | head -n $NUMRES
    else
        find $DIR -type f -exec du -a -h {}\; | sort -h | head -n $NUMRES
    fi
}

link-speeds(){
    ip a |awk '/state UP/{print $2}' | sed 's/://' | while read output;
    do
    echo $output:
    sudo ethtool $output |grep "Speed:"
    done
}



# idrac-console() {
#     dockersr idrac-console
#     source $PRIVATE_DOTFILES/.personal-env
#     gpg --decrypt $PRIVATE_DOTFILES/.private-env.gpg > $PRIVATE_DOTFILES/.private-env && source $PRIVATE_DOTFILES/.private-env
#     rm -f $PRIVATE_DOTFILES/.private-env
#     if [[ -n "$SOURCE_BIND" && -d "$SOURCE_BIND" && -n "$DEST_BIND" ]]
#     then
#         echo "Launching with mount path"
#         docker run -d -p 5800:5800 -p 5900:5900 --name idrac-console --mount type=bind,source=$SOURCE_BIND,target=$DEST_BIND -e IDRAC_HOST=192.168.1.110 -e IDRAC_USER=$IDRAC_USER -e IDRAC_PASSWORD=$IDRAC_PASSWORD domistyle/idrac6
#     else
#         echo "Launching without mount path"
#         docker run -d -p 5800:5800 -p 5900:5900 --name idrac-console -e IDRAC_HOST=192.168.1.110 -e IDRAC_USER=$IDRAC_USER -e IDRAC_PASSWORD=$IDRAC_PASSWORD domistyle/idrac6
#     fi
#     sleep 1
#     firefox 127.0.0.1:5800
# }

#idrac-console() {
#    dockersr idrac-console
#    source $PRIVATE_DOTFILES/.personal-env
#    gpg --decrypt $PRIVATE_DOTFILES/.private-env.gpg > $PRIVATE_DOTFILES/.private-env && source $PRIVATE_DOTFILES/.private-env
#    rm -f $PRIVATE_DOTFILES/.private-env
#    if [[ -n "$SOURCE_BIND" && -d "$SOURCE_BIND" && -n "$DEST_BIND" ]]
#    then
#        echo "Launching with mount path"
#        docker run -d -p 5800:5800 -p 5900:5900 --name idrac-console --mount type=bind,source=$SOURCE_BIND,target=$DEST_BIND -e IDRAC_HOST=$IDRAC_HOST -e IDRAC_USER=$IDRAC_USER -e IDRAC_PASSWORD=$IDRAC_PASSWORD domistyle/idrac6
#    else
#        echo "Launching without mount path"
#        docker run -d -p 5800:5800 -p 5900:5900 --name idrac-console -e IDRAC_HOST=$IDRAC_HOST -e IDRAC_USER=$IDRAC_USER -e IDRAC_PASSWORD=$IDRAC_PASSWORD domistyle/idrac6
#    fi
#    sleep 1
#    firefox 127.0.0.1:5800
#}

# iodine-connect() {
#     source $PRIVATE_DOTFILES/.personal-env
#     gpg --decrypt $PRIVATE_DOTFILES/.private-env.gpg > $PRIVATE_DOTFILES/.private-env && source $PRIVATE_DOTFILES/.private-env
#     rm -f $PRIVATE_DOTFILES/.private-env
#     sudo iodine -f -P $IODINE_PASSWORD $IODINE_DOMAIN
# }
# alias socks-tunnel='ssh -ND 31337 -i ~/.ssh/id_ed25519 collin@172.16.0.1'

